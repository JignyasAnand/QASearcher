Q) Compare and contrast  ODBC and JDBC connections
A) Key Differences Between JDBC and ODBC

The most basic difference between JDBC and ODBC is that JDBC is language and platform dependent. On the other hand, the ODBC is language and platform independent.
Java Database Connectivity is an acronym for JDBC, and on the other hand, Open Database Connectivity is an acronym for ODBC.
The code for ODBC is complex and is hard to learn. However, the code for JDBC is simpler and easy to run.
https://www.geeksforgeeks.org/difference-odbc-jdbc/

Q) Explain different types of JDBC drivers?
A) ping

Q) Explain complete JDBC connection process?
A) Inspired by the original ODBC (Open Database Connectivity), the JDBC stands for Java Database Connectivity. JDBC is a Java database API that was created as an industry standard for making connections between Java applications and other databases. The Java JDBC connection in Java API defines all classes that handle various aspects of the database, such as connection details, result sets, and database metadata. Originally, JDBC was intended to be a client-side API that could connect to a data source. In version 2.0, it was added with an optional package that supports server-side connections. Since then, every new release of JDBC has included updates to both the client-side and server-side packages. The most recent version, which was released in September 2017, was part of Java SE 9.

More so, it supports various types of relational databases which use SQL (Structured Query Language) such as DB2, ORACLE, and Sybase. Each of these possesses a unique JDBC driver name, that encodes access request statements, issues commands, and handles result sets obtained from the database.

ow to create a Java JDBC connection

We have learned what a JDBC is, what it is used for, its components, driver types, and its relationship with relational databases like SQL. Now, we will be going through detailed steps through which we use JDBC to create a connection to a database in Java. Here is the 7 step process to create a Java JDBC connection:

1. Import the packages:

This includes uploading all the packages containing the JDBC classes, interfaces, and subclasses used during the database programming. More often than not, using import java.sql.* is enough. However, other classes can be imported if needed in the program.

2. Register the drivers:

Before connecting to the database, we’ll need to load or register the drivers once per database. This is done to create a communication channel with the database. Loading a driver can be done in two ways:

Class.forName()

DriverManager.registerDriver()

3. Establish a connection:

For the next step here, the getConnection() method is used to create a connection object that will correspond to a physical connection with the database. To get the getConnection() to access the database, the three parameters are a username, string data type URL, and a password. Two methods can be used to achieve this:

getConnection(URL, username, password): This uses three parameters URL, a password, and a username
getConnection(URL): This has only one parameter - URL. The URL has both a username and password. There are several JDBC connection strings for different relational databases and some are listed below: a. IBM DB2 database: jdbc:db2://HOSTNAME:PORT/DATABASE_NAME b. Oracle database: jdbc:oracle:thin:@HOST_NAME:PORT:SERVICE_NAME c. My SQL database: jdbc:mysql://HOST_NAME:PORT/DATABASE_NAME
4. Create a statement:

The statement can now be created to perform the SQL query when the connection has been established. There are three statements from the createStatement method of the connection class to establish the query. These statements are

Statement: This is used to create simple SQL statements with no parameter. An example is: Statement statemnt1 = conn.createStatement();. This statement returns the ResultSet object.
PreparedStatement: This extends the Statement interface. It improves the application's performance because it has more features and compiles the query only once. It is used for precompiled SQL statements that have parameters.
CallableStatement: CallableStatements also extends the PreparedStatement interface. It is used for SQL statements with parameters that invoke procedure or function in the database. It is simply created by calling the prepare all method of the connection object.
5. Execute the query:

This uses a type statement object to build and submit SQL statements to a database. It has four distinct methods:

ResultSet executeQuery(String sql)
executeUpdate(String sql)
execute(String sql)
executeBatch()
6. Retrieve results:

When queries are executed using the executeQuery() method, it produces results stored in the ResultSet object. The ResultSet object is then used to access the retrieved data from the database.

7. Close the connections:

The JDBC connection can now be closed after all is done. The resource has to be closed to avoid running out of connections. It can be done automatically using ‘conn.close();’. But for versions of Java 7 and above, it can be closed using a try-catch block

Conclusion

The JDBC API is a universal data access mechanism that can be used by any program that uses Java. With the JDBC API, you can access almost any type of data source, such as relational databases and flat files. It also provides a common base for developing tools and alternate interfaces. After creating the connection, it can allow the programmer to access request statements and issue commands and handle result sets obtained from the database. The process of things done within the Java application is summarized in three steps, and they are:

Establishing a connection with a data source
Send queries and update statements to the data source
Processing the results
Author


Author
Gospel Bassey

Gospel Bassey is a creative technical writer who harnesses the power of words to break down complex concepts into simple terms. He is an exper

